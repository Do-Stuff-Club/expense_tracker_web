#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

# Color definitions
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Checking Prettier Formatting:"
yarn format_check
prettier_exit_code="$?"

echo -e "${YELLOW}Checking Typescript:"
yarn type_check
typescript_exit_code="$?"

echo -e "${YELLOW}Checking ESLint rules:"
yarn lint_check
eslint_exit_code="$?"

echo -e "${YELLOW}Running Jest unit tests:"
yarn test
jest_exit_code="$?"

# Print error messsages
echo -e "${YELLOW}Summary:"
exit_code=0
if [ "$prettier_exit_code" != "0" ]; then
  echo -e "${YELLOW}Prettier: ${RED}failed"
  exit_code=1
else
  echo -e "${YELLOW}Prettier: ${GREEN}passed"
fi

if [ "$typescript_exit_code" != "0" ]; then
  echo -e "${YELLOW}Typescript check ${RED}failed"
  exit_code=1
else
  echo -e "${YELLOW}Typescript check ${GREEN}passed"
fi

if [ "$eslint_exit_code" != "0" ]; then
  echo -e "${YELLOW}ESLint ${RED}failed"
  exit_code=1
else
  echo -e "${YELLOW}ESLint ${GREEN}passed"
fi

if [ "$jest_exit_code" != "0" ]; then
  echo -e "${YELLOW}Jest tests ${RED}failed"
  exit_code=1
else
  echo -e "${YELLOW}Jest tests ${GREEN}passed"
fi

echo -e ${NC}

exit ${exit_code}
